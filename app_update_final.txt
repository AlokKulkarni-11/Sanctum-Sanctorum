import React, { useState, useEffect } from 'react';
import './styles/_variables.css';
import './styles/base.css';
import './styles/components.css';
import Header from './components/Header';
import EntriesList from './components/EntriesList';
import EntryForm from './components/EntryForm';
import Footer from './components/Footer';
import { ThemeProvider } from './components/ThemeContext';
import { supabase } from './supabaseClient';
import { v4 as uuidv4 } from 'uuid';
import LoginForm from './components/LoginForm';

function App() {
  const [entries, setEntries] = useState([]);
  const [showEntryForm, setShowEntryForm] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [user, setUser] = useState(null);
  const [showLogin, setShowLogin] = useState(false);

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
      if (session) {
        fetchEntries(session.user.id);
      }
    });

    const { data: authListener } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
      if (!session) {
        setEntries([]);
      } else {
        fetchEntries(session.user.id);
      }
    });

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, []);

  const fetchEntries = async (userId) => {
    const { data, error } = await supabase
      .from('entries')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching entries:', error);
    } else {
      setEntries(data);
    }
  };

  const handleAddEntry = async (newEntry) => {
    if (!user) {
      alert('You must be logged in to add entries.');
      return;
    }

    const { createdAt, file, ...entryWithoutCreatedAtAndFile } = newEntry;
    const entryToInsert = { ...entryWithoutCreatedAtAndFile, id: uuidv4(), user_id: user.id };
    const { data, error } = await supabase
      .from('entries')
      .insert([entryToInsert])
      .select();

    if (error) {
      console.error('Error adding entry:', error);
      alert('Failed to add entry: ' + error.message);
    } else {
      setEntries([data[0], ...entries]);
      setShowEntryForm(false);
    }
  };

  const handleDeleteEntry = async (id) => {
    if (!user) {
      alert('You must be logged in to delete entries.');
      return;
    }

    const { error } = await supabase
      .from('entries')
      .delete()
      .eq('id', id)
      .eq('user_id', user.id);

    if (error) {
      console.error('Error deleting entry:', error);
    } else {
      setEntries(entries.filter(entry => entry.id !== id));
    }
  };

  const handleEditEntry = async (updatedEntry) => {
    if (!user) {
      alert('You must be logged in to edit entries.');
      return;
    }

    const { createdAt, ...entryWithoutCreatedAt } = updatedEntry;
    const { data, error } = await supabase
      .from('entries')
      .update(entryWithoutCreatedAt)
      .eq('id', updatedEntry.id)
      .eq('user_id', user.id)
      .select();

    if (error) {
      console.error('Error updating entry:', error);
    } else {
      setEntries(entries.map(entry => 
        entry.id === updatedEntry.id ? data[0] : entry
      ));
    }
  };

  const handleLogin = async (email, password) => {
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) {
      alert('Login failed: ' + error.message);
    } else {
      setShowLogin(false);
    }
  };

  const handleRegister = async (email, password) => {
    const { error } = await supabase.auth.signUp({ email, password });
    if (error) {
      alert('Registration failed: ' + error.message);
    } else {
      alert('Registration successful! Please check your email to confirm your account.');
      setShowLogin(false);
    }
  };

  const handleLogout = async () => {
    const { error } = await supabase.auth.signOut();
    if (error) {
      alert('Logout failed: ' + error.message);
    }
  };

  const filteredEntries = entries
    .filter(entry => {
      if (filterType === 'all') return true;
      return entry.type === filterType;
    })
    .filter(entry => {
      if (!searchQuery) return true;

      const query = searchQuery.toLowerCase();
      return (
        entry.title.toLowerCase().includes(query) ||
        (entry.content && entry.content.toLowerCase().includes(query)) ||
        (entry.tags && entry.tags.some(tag => tag.toLowerCase().includes(query)))
      );
    });

  return (
    <ThemeProvider>
      <div className="app">
        <Header 
          onSearch={setSearchQuery}
          searchQuery={searchQuery}
          filterType={filterType}
          onFilterChange={setFilterType}
          user={user}
          onLogout={handleLogout}
          onShowLogin={() => setShowLogin(true)}
        />
        
        <main className="main-content">
          <div className="container">
            <div className="action-bar">
              <button 
                className="btn btn-primary"
                onClick={() => setShowEntryForm(true)}
                style={{ marginBottom: 'var(--spacing-4)' }}
                disabled={!user}
                title={user ? 'Add new item' : 'Login to add items'}
              >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="btn-icon" width="16" height="16">
                  <line x1="12" y1="5" x2="12" y2="19" />
                  <line x1="5" y1="12" x2="19" y2="12" />
                </svg>
                Add New Item
              </button>
            </div>
            
            <EntriesList
              entries={filteredEntries}
              onDelete={handleDeleteEntry}
              onEdit={handleEditEntry}
            />
          </div>
        </main>
        
        <Footer />
        
        {showEntryForm && user && (
          <EntryForm
            onSubmit={handleAddEntry}
            onCancel={() => setShowEntryForm(false)}
            initialType={selectedItemType}
          />
        )}

        {showLogin && (
          <LoginForm
            onLogin={handleLogin}
            onRegister={handleRegister}
            onCancel={() => setShowLogin(false)}
          />
        )}
      </div>
    </ThemeProvider>
  );
}

export default App;
